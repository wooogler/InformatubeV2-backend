/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "../context"
import * as prisma from "@prisma/client"
import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    upload<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Comment: prisma.Comment;
  Mutation: {};
  Query: {};
  User: prisma.User;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
  Upload: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Comment: { // field return type
    author: NexusGenRootTypes['User']; // User!
    authorId: number; // Int!
    createdAt: any; // DateTime!
    dislikeUsers: NexusGenRootTypes['User'][]; // [User!]!
    id: number; // Int!
    imageUrl: string; // String!
    likeUsers: NexusGenRootTypes['User'][]; // [User!]!
    sort: number; // Float!
    text: string; // String!
    time: string; // String!
    url: string; // String!
  }
  Mutation: { // field return type
    cancelDislike: NexusGenRootTypes['Comment']; // Comment!
    cancelLike: NexusGenRootTypes['Comment']; // Comment!
    createComment: NexusGenRootTypes['Comment']; // Comment!
    dislike: NexusGenRootTypes['Comment']; // Comment!
    like: NexusGenRootTypes['Comment']; // Comment!
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    sortWithCF: boolean; // Boolean!
  }
  Query: { // field return type
    comments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    me: NexusGenRootTypes['User'] | null; // User
    users: NexusGenRootTypes['User'][]; // [User!]!
    viewComments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    viewRandomComments: NexusGenRootTypes['Comment'][]; // [Comment!]!
  }
  User: { // field return type
    comments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    dislikeComments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    id: number; // Int!
    likeComments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    name: string; // String!
  }
}

export interface NexusGenArgTypes {
  Comment: {
    dislikeUsers: { // args
      skip?: number | null; // Int
    }
    likeUsers: { // args
      skip?: number | null; // Int
    }
  }
  Mutation: {
    cancelDislike: { // args
      commentId?: number | null; // Int
    }
    cancelLike: { // args
      commentId?: number | null; // Int
    }
    createComment: { // args
      image?: any | null; // Upload
      text?: string | null; // String
      time?: string | null; // String
      url?: string | null; // String
    }
    dislike: { // args
      commentId?: number | null; // Int
    }
    like: { // args
      commentId?: number | null; // Int
    }
    login: { // args
      name: string; // String!
    }
    sortWithCF: { // args
      dislikeId?: number[] | null; // [Int!]
      likeId?: number[] | null; // [Int!]
    }
  }
  Query: {
    comments: { // args
      skip?: number | null; // Int
    }
    users: { // args
      skip?: number | null; // Int
    }
    viewComments: { // args
      sortNum: number; // Float!
    }
  }
  User: {
    comments: { // args
      skip?: number | null; // Int
    }
    dislikeComments: { // args
      skip?: number | null; // Int
    }
    likeComments: { // args
      skip?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthPayload" | "Comment" | "Mutation" | "Query" | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String" | "Upload";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}